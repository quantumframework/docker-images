---
- hosts: localhost
  gather_facts: false
  become: false
  vars:
    ansible_python_interpreter: python3
    keycloak_validate_certs: no
    skip_internal_requests: "{{ lookup('env', 'UM_SKIP_INTERNAL_REQUESTS') == '1' }}"
    debug: "{{ lookup('env', 'DEBUG') == '1' }}"
    validate_certs: no
    unimatrix_defaults: "{{ lookup('env', 'UNIMATRIX_DEFAULTS') }}"
    unimatrix_environment: "{{ lookup('env', 'UNIMATRIX_ENVIRONMENT') }}"
  tasks:
  - include_vars: "{{ lookup('env', 'UNIMATRIX_DEFAULTS') }}"
    tags:
    - always
  - include_vars: "{{ lookup('env', 'UNIMATRIX_ENVIRONMENT') }}"
    tags:
    - always

  - name: set the Keycloak base URL
    set_fact:
      keycloak_url: "https://sso.{{ system_base_domain }}/auth"

  - name: retrieve the Keycloak password from the cluster
    when: keycloak_enabled|default(False)
    tags:
    - always
    no_log: not debug
    register: query
    k8s_facts:
      api_version: v1
      kind: Secret
      namespace: "{{ K8S_NAMESPACE_PREFIX }}apps0001"
      name: keycloak.secrets.admin

  - name: ensure that the lookup returned a single result
    when: keycloak_enabled|default(False)
    tags:
    - always
    no_log: not debug
    assert:
      that: "(query.resources|length) == 1"

  - name: set Keycloak credentials as Ansible facts
    when: keycloak_enabled|default(False)
    tags:
    - always
    no_log: not debug
    set_fact:
      keycloak_username: "{{ query.resources[0].data.KEYCLOAK_USER|b64decode }}"
      keycloak_password: "{{ query.resources[0].data.KEYCLOAK_PASSWORD|b64decode }}"

  # Check if there is a GitLab API token secret named
  # gitlab.secrets.token and if so, configure some
  # default users for the Unimatrix applications.
  - name: retrieve the GitLab API secret from the cluster
    no_log: not debug
    register: query
    k8s_facts:
      api_version: v1
      kind: Secret
      namespace: "{{ K8S_NAMESPACE_PREFIX }}infra0002"
      name: gitlab.secrets.api

  - name: set gitlab_api_configured fact
    set_fact:
      gitlab_api_configured: false

  - name: set Ansible fact containing the GitLab API token and URL
    when: >-
      (query.resources|length) == 1
      and query.resources[0].data.GITLAB_API_TOKEN
    set_fact:
      gitlab_api_token: "{{ query.resources[0].data.GITLAB_API_TOKEN|b64decode }}"
      gitlab_api_url: "https://gitlab.{{ system_base_domain }}"
      gitlab_api_configured: true
      gitlab_validate_certs: false

  # After an included playbook completes succesfully, we may assume
  # that the service is up and running.
  #- name: included Keycloak provisioning tasks
  #  include: playbooks/keycloak.yml
  #  when: keycloak_enabled|default(False)

  #- name: included GitLab provisioning tasks
  #  include: playbooks/gitlab.yml
  #  when: gitlab_enabled|default(False)
  #  tags:
  #  - gitlab

  #- name: included Jenkins provisioning tasks
  #  include: playbooks/jenkins.yml
  #  when: jenkins_enabled|default(False)
  #  tags:
  #  - jenkins

  - name: included AWX provisioning tasks
    include: playbooks/awx.yml
    when: awx_enabled|default(False)
    tags:
    - awx
